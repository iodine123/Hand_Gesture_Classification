# -*- coding: utf-8 -*-
"""FINAL_PROJECT_ML_Muhammad_Iodine_Hanifan_F.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19dgChWrId0xKXz0LXMSGpBm6rM2_NT4L
"""

#============================== PROJECT MACHINE LEARNING 1 - Dasar ===============================================
#=============================== Muhammad Iodine Hanifan Firdaus    ==============================================

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd /content/drive/MyDrive/belajar_machine_learning_dicoding/dataset/dataset_project_1

# Commented out IPython magic to ensure Python compatibility.
# %pip install split-folders

import splitfolders as s_folder
import os

dir_train = 'dataset'
dir_val = 'data_siap'

s_folder.ratio(dir_train, output = dir_val, seed=42, ratio=(0.6, 0.4))

#=================================== Generate Model ==================================

import os
import tensorflow as tf
import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator

base_dir = 'data_siap'
train_dir = os.path.join(base_dir, 'train')
val_dir = os.path.join(base_dir, 'val')

train_gen = ImageDataGenerator(
                      rescale = 1./255
)

val_gen = ImageDataGenerator(
                      rescale = 1./255
)


train_generator = train_gen.flow_from_directory(
    train_dir,
    target_size = (200,200),
    batch_size = 4,
    class_mode = 'categorical'
)

val_generator = val_gen.flow_from_directory(
    val_dir,
    target_size = (200,200),
    batch_size = 4,
    class_mode = 'categorical'
)

#USING VGG16 16
model = tf.keras.models.Sequential([
        tf.keras.layers.ZeroPadding2D(12,  input_shape=(200, 200, 3)),
        tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)),
        tf.keras.layers.Conv2D(filters=128, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.Conv2D(filters=128, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)),
        tf.keras.layers.Conv2D(filters=256, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.Conv2D(filters=256, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.Conv2D(filters=256, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)),
        tf.keras.layers.Conv2D(filters=512, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.Conv2D(filters=512, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.Conv2D(filters=512, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)),
        tf.keras.layers.Conv2D(filters=512, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.Conv2D(filters=512, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.Conv2D(filters=512, kernel_size=(3,3), activation='relu', padding='same'),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(4096, activation='relu'),
        tf.keras.layers.Dropout(0.1),
        tf.keras.layers.Dense(4096, activation='relu'),
        tf.keras.layers.Dropout(0.3),
        tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

#compile model
model.compile(
    loss = 'categorical_crossentropy',
    optimizer = tf.optimizers.Adadelta(learning_rate=0.1),
    metrics = ['accuracy']
)

from tensorflow.keras.callbacks import ModelCheckpoint

model_path = 'model_save/vgg16_1.h5'

checkpoint = ModelCheckpoint(
    model_path, 
    monitor='accuracy', 
    verbose=1, 
    save_best_only=True, 
    save_weights_only=False,
    save_freq="epoch",
    mode='max'
    )

import keras
from matplotlib import pyplot as plt

#train model
train_model = model.fit(
    train_generator,
    steps_per_epoch=32,
    epochs=40,
    validation_data=val_generator,
    validation_steps=16,
    verbose=2,
    callbacks=[checkpoint]
)

tf.keras.utils.plot_model(model, to_file="train_plot/model_plot.png", show_shapes=True)

plt.plot(train_model.history['accuracy'])
plt.plot(train_model.history['val_accuracy'])
plt.title('Plot Akurasi')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(train_model.history['loss'])
plt.plot(train_model.history['val_loss'])
plt.title('Plot Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

print("model save to " + model_path)

# Commented out IPython magic to ensure Python compatibility.
#============================== test model ===============================
import keras
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
file = files.upload()
 
for fn in file.keys():
  path = fn
  gambar = image.load_img(path, target_size=(200,200))
 
  imgplot = plt.imshow(gambar)
  x = image.img_to_array(gambar)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
 
  model = keras.models.load_model('model_save/vgg16_1.h5')
  classes = model.predict(images, batch_size=10)  
  print(fn)
  if classes[0][0] == 1.0:
    print('Kertas')
  if classes[0][1] == 1.0:
    print('Batu')
  if classes[0][2] == 1.0:
    print('Gunting')

# Commented out IPython magic to ensure Python compatibility.
#============================== test model ===============================

import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
file = files.upload()
 
for fn in file.keys():
  path = fn
  gambar = image.load_img(path, target_size=(200,200))
 
  imgplot = plt.imshow(gambar)
  x = image.img_to_array(gambar)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
 
  model = keras.models.load_model('model_save/vgg16_1.h5')
  classes = model.predict(images, batch_size=10)  
  print(fn)
  if classes[0][0] == 1.0:
    print('Kertas')
  if classes[0][1] == 1.0:
    print('Batu')
  if classes[0][2] == 1.0:
    print('Gunting')

# Commented out IPython magic to ensure Python compatibility.
#============================== test model ===============================

import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
file = files.upload()
 
for fn in file.keys():
  path = fn
  gambar = image.load_img(path, target_size=(200,200))
 
  imgplot = plt.imshow(gambar)
  x = image.img_to_array(gambar)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
 
  model = keras.models.load_model('model_save/vgg16_1.h5')
  classes = model.predict(images, batch_size=10)  
  print(fn)
  if classes[0][0] == 1.0:
    print('Kertas')
  if classes[0][1] == 1.0:
    print('Batu')
  if classes[0][2] == 1.0:
    print('Gunting')